#include<bits/stdc++.h>
using namespace std;

#define MAX 1000

vector<pair<int,int> > adj;
int weight[MAX],dist[MAX];
int vertices = 5, edges = 8;

void bellmanFord(int v){
   
	for(int i = 0; i < vertices; i++)    dist[i]=INT_MAX;
	dist[v] = 0;
	for(int i = 1; i <= vertices; i++){
	    for(int j = 0; j < edges; j++){
	        if(dist[adj[j].second] > dist[adj[j].first] + weight[j]){
	            if(i == vertices)
	            	printf("Negative cycle is present in graph");
	            dist[adj[j].second] = dist[adj[j].first] + weight[j];
	        }
	    }
	}
	
    for(int i = 0; i < vertices; i++)    printf("distance from node %d to node %d = %d\n",v,i,dist[i]);
}

int main(){

	// constructing the graph
	adj.push_back(make_pair(0,1));
	weight[0]=-1;

	adj.push_back(make_pair(0,2));
	weight[1]=4;

	adj.push_back(make_pair(1,2));
	weight[2]=3;

	adj.push_back(make_pair(1,3));
	weight[3]=2;

	adj.push_back(make_pair(1,4));
	weight[4]=2;

	adj.push_back(make_pair(3,2));
	weight[5]=5;

	adj.push_back(make_pair(3,1));
	weight[6]=1;

	adj.push_back(make_pair(4,3));
	weight[7]=-3;
    
    bellmanFord(0);
    
	return 0;
}
